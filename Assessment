G.Krishnaveni
22BEC015
ECE-A

1.
import java.util.ArrayList;
import java.util.List;
// Observer Pattern
interface Subscriber {
    void update(String news);
}

class NewsSubscriber implements Subscriber {
    private String name;
    public NewsSubscriber(String name) { this.name = name; }
    public void update(String news) { System.out.println(name + " received news: " + news); }
}

class NewsAgency {
    private List<Subscriber> subscribers = new ArrayList<>();
    public void addSubscriber(Subscriber sub) { subscribers.add(sub); }
    public void removeSubscriber(Subscriber sub) { subscribers.remove(sub); }
    public void notifySubscribers(String news) {
        for (Subscriber sub : subscribers) sub.update(news);
    }
}

// Strategy Pattern
interface PaymentStrategy { void pay(double amount); }
class CreditCardPayment implements PaymentStrategy { public void pay(double amount) { System.out.println("Paid " + amount + " using Credit Card."); } }
class PayPalPayment implements PaymentStrategy { public void pay(double amount) { System.out.println("Paid " + amount + " using PayPal."); } }
class ShoppingCart {
    private PaymentStrategy paymentStrategy;
    public void setPaymentStrategy(PaymentStrategy strategy) { this.paymentStrategy = strategy; }
    public void checkout(double amount) { paymentStrategy.pay(amount); }
}
// Singleton Pattern
class DatabaseConnection {
    private static DatabaseConnection instance;
    private DatabaseConnection() { System.out.println("Database connected!"); }
    public static DatabaseConnection getInstance() {
        if (instance == null) instance = new DatabaseConnection();
        return instance;
    }
    public void query(String sql) { System.out.println("Executing query: " + sql); }
}

// Factory Pattern
interface Shape { void draw(); }
class Circle implements Shape { public void draw() { System.out.println("Drawing Circle"); } }
class Rectangle implements Shape { public void draw() { System.out.println("Drawing Rectangle"); } }
class ShapeFactory {
    public Shape getShape(String shapeType) {
        if (shapeType == null) return null;
        if (shapeType.equalsIgnoreCase("CIRCLE")) return new Circle();
        if (shapeType.equalsIgnoreCase("RECTANGLE")) return new Rectangle();
        return null;
    }
}
// Adapter Pattern
interface Socket110V { void supply110V(); }
class Device220V { void supply220V() { System.out.println("Device running on 220V"); } }
class VoltageAdapter implements Socket110V {
    private Device220V device;
    public VoltageAdapter(Device220V device) { this.device = device; }
    public void supply110V() {
        System.out.println("Converting 110V to 220V...");
        device.supply220V();
    }
}

// Decorator Pattern
interface Coffee { String getDescription(); double cost(); }
class SimpleCoffee implements Coffee { public String getDescription() { return "Simple Coffee"; } public double cost() { return 5.0; } }
abstract class CoffeeDecorator implements Coffee {
    protected Coffee coffee;
    public CoffeeDecorator(Coffee coffee) { this.coffee = coffee; }
}
class MilkDecorator extends CoffeeDecorator {
    public MilkDecorator(Coffee coffee) { super(coffee); }
    public String getDescription() { return coffee.getDescription() + ", Milk"; }
    public double cost() { return coffee.cost() + 2.0; }
}
class SugarDecorator extends CoffeeDecorator {
    public SugarDecorator(Coffee coffee) { super(coffee); }
    public String getDescription() { return coffee.getDescription() + ", Sugar"; }
    public double cost() { return coffee.cost() + 1.0; }
}
public class DesignPatternsDemo {
    public static void main(String[] args) {
        System.out.println("=== Behavioural Patterns ===");
        // Observer
        NewsAgency agency = new NewsAgency();
        agency.addSubscriber(new NewsSubscriber("Alice"));
        agency.addSubscriber(new NewsSubscriber("Bob"));
        agency.notifySubscribers("Breaking News: Java 21 released!");

        // Strategy
        ShoppingCart cart = new ShoppingCart();
        cart.setPaymentStrategy(new CreditCardPayment());
        cart.checkout(500);
        cart.setPaymentStrategy(new PayPalPayment());
        cart.checkout(300);

        System.out.println("\n=== Creational Patterns ===");
        // Singleton
        DatabaseConnection db1 = DatabaseConnection.getInstance();
        DatabaseConnection db2 = DatabaseConnection.getInstance();
        db1.query("SELECT * FROM users");
        System.out.println("db1 == db2: " + (db1 == db2));

        // Factory
        ShapeFactory factory = new ShapeFactory();
        Shape shape1 = factory.getShape("CIRCLE");
        shape1.draw();
        Shape shape2 = factory.getShape("RECTANGLE");
        shape2.draw();

        System.out.println("\n=== Structural Patterns ===");
        // Adapter
        Device220V device = new Device220V();
        Socket110V adapter = new VoltageAdapter(device);
        adapter.supply110V();

        // Decorator
        Coffee coffee = new SimpleCoffee();
        coffee = new MilkDecorator(coffee);
        coffee = new SugarDecorator(coffee);
        System.out.println(coffee.getDescription() + " costs " + coffee.cost());
    }
}

2.
import java.util.*;

// ===== Singleton: Office Configuration =====
class OfficeConfig {
    private static OfficeConfig instance;
    private Map<Integer, Room> rooms = new HashMap<>();

    private OfficeConfig() {}

    public static OfficeConfig getInstance() {
        if (instance == null) instance = new OfficeConfig();
        return instance;
    }

    public void configure(int count) {
        for (int i = 1; i <= count; i++) {
            rooms.put(i, new Room(i));
        }
        System.out.println("Office configured with " + count + " meeting rooms.");
    }

    public Room getRoom(int id) { return rooms.get(id); }
}

// ===== Observer Pattern =====
interface Observer {
    void update(boolean occupied, int roomId);
}

class LightSystem implements Observer {
    public void update(boolean occupied, int roomId) {
        System.out.println("Room " + roomId + " Lights " + (occupied ? "ON" : "OFF"));
    }
}

class ACSystem implements Observer {
    public void update(boolean occupied, int roomId) {
        System.out.println("Room " + roomId + " AC " + (occupied ? "ON" : "OFF"));
    }
}

// ===== Room Class =====
class Room {
    private int id;
    private int occupants = 0;
    private boolean booked = false;
    private List<Observer> observers = new ArrayList<>();

    public Room(int id) {
        this.id = id;
        observers.add(new LightSystem());
        observers.add(new ACSystem());
    }

    public void addOccupants(int n) {
        occupants = n;
        boolean occupied = occupants >= 2;
        System.out.println("Room " + id + " occupants: " + n + (occupied ? " (Occupied)" : " (Not occupied)"));
        notifyObservers(occupied);

        // Auto-release booking if room is empty
        if (!occupied && booked) {
            booked = false;
            System.out.println("Booking for Room " + id + " released due to no occupancy.");
        }
    }

    public boolean book(String time, int duration) {
        if (booked) {
            System.out.println("Room " + id + " already booked!");
            return false;
        }
        booked = true;
        System.out.println("Room " + id + " booked at " + time + " for " + duration + " mins.");
        return true;
    }

    public void cancel() {
        if (!booked) {
            System.out.println("Room " + id + " not booked.");
        } else {
            booked = false;
            System.out.println("Booking for Room " + id + " cancelled.");
        }
    }

    private void notifyObservers(boolean occupied) {
        for (Observer o : observers) o.update(occupied, id);
    }
}

// ===== Command Pattern =====
interface Command {
    void execute();
}

class BookRoomCommand implements Command {
    private Room room;
    private String time;
    private int duration;

    public BookRoomCommand(Room room, String time, int duration) {
        this.room = room;
        this.time = time;
        this.duration = duration;
    }

    public void execute() {
        room.book(time, duration);
    }
}

class CancelRoomCommand implements Command {
    private Room room;

    public CancelRoomCommand(Room room) {
        this.room = room;
    }

    public void execute() {
        room.cancel();
    }
}

class OccupancyCommand implements Command {
    private Room room;
    private int count;

    public OccupancyCommand(Room room, int count) {
        this.room = room;
        this.count = count;
    }

    public void execute() {
        room.addOccupants(count);
    }
}

// ===== Main Class =====
public class SmartOfficeDemo {
    public static void main(String[] args) {
        // Configure office
        OfficeConfig config = OfficeConfig.getInstance();
        config.configure(2);

        // Get Room 1
        Room r1 = config.getRoom(1);

        System.out.println("\n--- Booking Room ---");
        Command book = new BookRoomCommand(r1, "09:00", 60);
        book.execute();

        System.out.println("\n--- Occupying Room ---");
        Command occupy = new OccupancyCommand(r1, 2);
        occupy.execute();

        System.out.println("\n--- Leaving Room ---");
        Command leave = new OccupancyCommand(r1, 0);
        leave.execute();

        System.out.println("\n--- Cancelling Booking ---");
        Command cancel = new CancelRoomCommand(r1);
        cancel.execute();
    }
}
